/*
A composite number equal to the product of two different primes -  have the same digital length..
A composite number equal to the square of a prime.

*/

one -->

#include <cmath>
bool isPrime(int n){
    if(n == 1 || n == 0) return false;
    if(n == 2) return true;
    for(int i = 2; i <= sqrt(n); i++){
        if(n % i == 0) return false;
    }
    return true;
}
std::vector<int> getAllPrimes(int n){    
    std::vector<int> v;    
    for(int i = 0; i <= n; i++){
        if(isPrime(i)){
        v.push_back(i);
        }
    }
    return v;
}
bool isBrilliant(int n) {
	std::vector<int> k = getAllPrimes(n);
	for(auto i:k){
	    for(auto j:k){
	        if(i * j == n && (std::to_string(i).length() == std::to_string(j).length())) return true;
						  
							
						
	    }
	}
	return false;
}

------------------------------------------------------------------------------------
