one -->

char con(char s){    
    s = tolower(s);
    
    if(s == 'a' || s == 'b' || s == 'c')
    return '2';
    else if(s == 'd' || s == 'e' || s == 'f')
    return '3';
    else if(s == 'g' || s == 'h' || s == 'i')
    return '4';
    else if(s == 'j' || s == 'k' || s == 'l')
    return '5';
    else if(s == 'm' || s == 'n' || s == 'o')
    return '6';
    else if(s == 'p' || s == 'q' || s == 'r' || s == 's')
    return '7';
    else if(s == 't' || s == 'u' || s == 'v')
    return '8';
    else if(s == 'w' || s == 'x' || s == 'y' || s == 'z')
    return '9';
    else return s;    
}

std::string textToNum(std::string phone) {	
	for(auto &c:phone){
	    c = con(c);
	}
	return phone;	
}

----------------------------------------------

two -->

#include <regex>

std::string textToNum(std::string phone) {
	  std::string newStr;
    std::regex ABC("[A-C]");
    std::regex DEF("[D-F]");
    std::regex GHI("[G-I]");
    std::regex JKL("[J-L]");
    std::regex MNO("[M-O]");
    std::regex PQRS("[P-S]");
    std::regex TUV("[T-V]");
    std::regex WXYZ("[W-Z]");
    newStr = std::regex_replace(phone, ABC, "2");
    newStr = std::regex_replace(newStr, DEF, "3");
    newStr = std::regex_replace(newStr, GHI, "4");
    newStr = std::regex_replace(newStr, JKL, "5");
    newStr = std::regex_replace(newStr, MNO, "6");
    newStr = std::regex_replace(newStr, PQRS, "7");
    newStr = std::regex_replace(newStr, TUV, "8");
    newStr = std::regex_replace(newStr, WXYZ, "9");
	
	return newStr;
}
