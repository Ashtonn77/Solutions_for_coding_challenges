**Iterative BFS**
**C++**
#include <vector>
using namespace std;

class BinaryTree {
public:
  int value;
  BinaryTree *left;
  BinaryTree *right;

  BinaryTree(int value);
  void insert(vector<int> values, int i = 0);
  void invertedInsert(vector<int> values, int i = 0);
};

void swap(BinaryTree *&root)
{
	
	BinaryTree *temp = root->left;
	root->left = root->right;
	root->right = temp;
	
}

void invertBinaryTree(BinaryTree *tree) {
  
	queue<BinaryTree*> q;
	q.push(tree);
	
	while(!q.empty())
	{
		BinaryTree *front = q.front();
		q.pop();
		
		swap(front);
		if(front->left){ q.push(front->left); }
		if(front->right){ q.push(front->right); }		
		
	}
	
}











**Python**
def swap(root):
	temp = root.left
	root.left = root.right
	root.right = temp

def invertBinaryTree(tree):
    q = []
	q.append(tree)
	
	while(len(q) > 0):
		front = q.pop(0)
		swap(front)
		
		if front.left != None:
			q.append(front.left)
		if front.right != None:
			q.append(front.right)


# This is the class of the input binary tree.
class BinaryTree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


**Recursive DFS**
**C++**
#include <vector>
using namespace std;

class BinaryTree {
public:
  int value;
  BinaryTree *left;
  BinaryTree *right;

  BinaryTree(int value);
  void insert(vector<int> values, int i = 0);
  void invertedInsert(vector<int> values, int i = 0);
};

void swap(BinaryTree *&root)
{
	
	BinaryTree *temp = root->left;
	root->left = root->right;
	root->right = temp;
	
}

void invertBinaryTree(BinaryTree *tree) {
  
	if(!tree){ return; }
	swap(tree);
	invertBinaryTree(tree->left);
	invertBinaryTree(tree->right);
	
}

**Python**
def swap(root):
	temp = root.left
	root.left = root.right
	root.right = temp

def invertBinaryTree(tree):
	if tree == None : return
	swap(tree)
	invertBinaryTree(tree.left)
	invertBinaryTree(tree.right)


# This is the class of the input binary tree.
class BinaryTree:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

