**C++**
#include <unordered_map>
using namespace std;

// Do not edit the class below except for the
// populateSuffixTrieFrom and contains methods.
// Feel free to add new properties and methods
// to the class.
class TrieNode {
public:
  unordered_map<char, TrieNode *> children;
};

class SuffixTrie {
public:
  TrieNode *root;
  char endSymbol;

  SuffixTrie(string str) {
    this->root = new TrieNode();
    this->endSymbol = '*';
    this->populateSuffixTrieFrom(str);
  }
	
	void insertSubstringStartingAt(int i, string str)
	{
		TrieNode *node = this->root;
		for(int j = i; j < str.length(); j++)
		{
			char letter = str[j];
			if(node->children.find(letter) == node->children.end())
			{
				TrieNode *newNode = new TrieNode();
				node->children.insert({letter, newNode});
			}
			node = node->children[letter];
	
			
		}		
			node->children.insert({this->endSymbol, nullptr});		
	}
	
  void populateSuffixTrieFrom(string str) {
    for(int i = 0; i < str.length(); i++)
		{
			this->insertSubstringStartingAt(i, str);
		}
  }

  bool contains(string str) {
 		TrieNode *node = this->root;
		for(auto i : str)
		{
			char letter = i;
			if(node->children.find(letter) == node->children.end())
			{
				return false;
			}
			node = node->children[letter];
			
		}
	
		return node->children.find(this->endSymbol) != node->children.end();
		
  }
};

**Python**
class SuffixTrie:
    def __init__(self, string):
        self.root = {}
        self.endSymbol = "*"
        self.populateSuffixTrieFrom(string)

	def insertSubstringStartingAt(self, i, string):
		node = self.root
		for j in range(i, len(string)):
			letter = string[j]
			if letter not in node:
				node[letter] = {}
			
			node = node[letter]
		
		node[self.endSymbol] = True
		
    def populateSuffixTrieFrom(self, string):        
		for i in range(len(string)):
			self.insertSubstringStartingAt(i, string)

    def contains(self, string):
    	node = self.root
		for letter in string:
			if letter not in node:
				return False
			
			node = node[letter]
		
		return self.endSymbol in node

