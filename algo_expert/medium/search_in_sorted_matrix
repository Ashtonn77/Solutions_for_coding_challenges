**C++**
**First solution**

#include <vector>
using namespace std;


int mid(int i, int j)
{
	return (i + j) / 2;
}

int binary_search(vector<int> v, int t)
{
	
	int i = 0;
	int j = v.size()-1;
	int m = mid(i, j);
	
	while(i <= j)
	{
		if(v[m] == t){ return m; }
		else if(v[m] < t) i = m + 1;
		else j = m - 1;
		
		m = mid(i, j);
		
	}
	
	return -1;
}

vector<int> searchInSortedMatrix(vector<vector<int>> matrix, int target) {


	for(int i = 0; i < matrix.size(); i++)
	{
			if(binary_search(matrix[i], target) != -1)
				return {i, binary_search(matrix[i], target)};		
	}
	
	return {-1, -1};
	
	
**shorter solution**
vector<int> searchInSortedMatrix(vector<vector<int>> matrix, int target) {

	int r = 0;
	int c = matrix[0].size()-1;
	
	while(r < matrix.size() && c >= 0)
	{
		
		int n = matrix[r][c];
		if(n < target) r++;
		else if(n > target)c--;
		else return {r, c};		
		
	}
	
	
	return {-1, -1};
	
}

**Python**
def searchInSortedMatrix(matrix, target):
    r = 0
	c = len(matrix[0]) -1
	
	while r < len(matrix) and c >= 0:
		n = matrix[r][c]
		if n < target:
			r += 1
		elif n > target:
			c -= 1;
		else:
			return [r, c]
		
	return [-1, -1]	
	


**C#**
using System;

public class Program {
	public static int[] SearchInSortedMatrix(int[,] matrix, int target) {
		int r = 0;
		int c = matrix.GetLength(1)-1;
			
			while(r < matrix.GetLength(0) && c >= 0)
			{
				int n = matrix[r, c];
				if(n < target){
					r++;
				}
				else if(n > target){
					c--;
				}
				else{
					return new int[] {r, c};
				}
				
			}
			
		return new int[] {-1, -1};
	}
}


**Java**

import java.util.*;

class Program {
  public static int[] searchInSortedMatrix(int[][] matrix, int target) {
    
		int r = 0;
		int c = matrix[0].length - 1;
		
		while(r < matrix.length && c >= 0)
		{
			
			int n = matrix[r][c];
			if(n < target) r++;
			else if(n > target) c--;
			else return new int[] {r, c};
			
		}		
		
    return new int[] {-1, -1};
  }
}

	
	
	
