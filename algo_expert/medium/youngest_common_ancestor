**C++**
#include <vector>
using namespace std;

class AncestralTree {
public:
  char name;
  AncestralTree *ancestor;

  AncestralTree(char name) {
    this->name = name;
    this->ancestor = NULL;
  }

  void addAsAncestor(vector<AncestralTree *> descendants);
};

int depth(AncestralTree *descendant, AncestralTree *ancestor)
{
		int d = 0;
		while(descendant != ancestor)
		{
			d++;
			descendant = descendant->ancestor;
		}
		return d;
}

AncestralTree *backtrack(AncestralTree *lower_descendant, AncestralTree *higher_descendant, int diff)
{
	
		while(diff > 0)
		{
			lower_descendant = lower_descendant->ancestor;
			diff--;
		}

		while(lower_descendant != higher_descendant)
		{
			lower_descendant = lower_descendant->ancestor;
			higher_descendant = higher_descendant->ancestor;
		}

		return lower_descendant;
	
}

AncestralTree *getYoungestCommonAncestor(AncestralTree *topAncestor,
                                         AncestralTree *descendantOne,
                                         AncestralTree *descendantTwo) {
  
	
		int depth_one = depth(descendantOne, topAncestor);
		int depth_two = depth(descendantTwo, topAncestor);

		if(depth_one > depth_two)
		{
			return backtrack(descendantOne, descendantTwo, depth_one - depth_two);
		}

		return backtrack(descendantTwo, descendantOne, depth_two - depth_one);
	
}

**Python**
# This is an input class. Do not edit.
class AncestralTree:
    def __init__(self, name):
        self.name = name
        self.ancestor = None


def getYoungestCommonAncestor(topAncestor, descendantOne, descendantTwo):
    d_1 = depth(descendantOne, topAncestor)
	d_2 = depth(descendantTwo, topAncestor)
	
	if d_1 > d_2:
		return backtrack(descendantOne, descendantTwo, d_1 - d_2)
	else:
		return backtrack(descendantTwo, descendantOne, d_2 - d_1)


def depth(d, a):
	c = 0
	while d != a:
		d = d.ancestor
		c += 1
	
	return c

def backtrack(lower, higher, d):
	
	while d > 0:
		lower = lower.ancestor
		d -= 1
		
	while lower != higher:
		lower = lower.ancestor
		higher = higher.ancestor
		
	return lower	

