**c++**
#include <vector>
using namespace std;

// Do not edit the class below except
// for the breadthFirstSearch method.
// Feel free to add new properties
// and methods to the class.
class Node {
public:
  string name;
  vector<Node *> children;

  Node(string str) { name = str; }

  vector<string> breadthFirstSearch(vector<string> *array) {
		
		queue<Node*> q;
		q.push(this);
		
		while(!q.empty())
		{
			Node *temp = q.front();
			q.pop();
			array->push_back(temp->name);
			
			for(int i = 0; i < temp->children.size(); i++)
			{
				q.push(temp->children[i]);				
			}			
			
		}
				
		return *array;

  }

  Node *addChild(string name) {
    Node *child = new Node(name);
    children.push_back(child);
    return this;
  }
}

**Python**
# Do not edit the class below except
# for the breadthFirstSearch method.
# Feel free to add new properties
# and methods to the class.
class Node:
    def __init__(self, name):
        self.children = []
        self.name = name

    def addChild(self, name):
        self.children.append(Node(name))
        return self

    def breadthFirstSearch(self, array):
        q = [self]
		
		while q:
			temp = q.pop(0)
			array.append(temp.name)
			
			for i in range(0, len(temp.children)):
				q.append(temp.children[i])
		
		return array
			
		
		

