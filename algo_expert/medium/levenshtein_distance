**C++**
using namespace std;

int levenshteinDistance(string str1, string str2) {
	
	int n = str1.length();
	int m = str2.length();	
	
	vector<vector<int> > edits(n + 1, vector<int>(m + 1,  0));
	
	for(int i = 1; i <= n; i++){ edits[i][0] = edits[i - 1][0] + 1; }
	for(int i = 1; i <= m; i++){ edits[0][i] = edits[0][i - 1] + 1; }
	
	for(int i = 1; i <= n; i++)
	{
		for(int j = 1; j <= m; j++)
		{
			
			if(str1[i - 1] == str2[j - 1])
			{
				edits[i][j] = edits[i - 1][j - 1];
			}
			else
			{
				
				int x = min(edits[i - 1][j], edits[i][j - 1]);
				edits[i][j] = 1 + min(x, edits[i - 1][j - 1]);
				
			}
			
		}
		
	}
	
	return edits.back().back();
	
}

**Python**
def levenshteinDistance(str1, str2):
    
	edits = [[x for x in range(len(str2) + 1)] for y in range(len(str1) + 1)]
	
	for i in range(1, len(str1) + 1):
		edits[i][0] = edits[i - 1][0] + 1
		
	for i in range(1, len(str1) + 1):
		
		for j in range(1, len(str2) + 1):
		
			if str1[i - 1] == str2[j - 1]:
				edits[i][j] = edits[i - 1][j - 1]
				
			else:
				edits[i][j] = 1 + min(edits[i - 1][j - 1], edits[i - 1][j], edits[i][j - 1])
				
	return edits[-1][-1]			

