**C++**
void removeKthNodeFromEnd(LinkedList *head, int k) {
  
	LinkedList *fast = head;
	LinkedList *slow = head;
	
	for(int i = 0; i < k; i++){ fast = fast->next; }
	if(!fast)
	{
		head->value = head->next->value;
		head->next = head->next->next;
		return;
	}
	
	LinkedList *prev = slow;
	
	while(fast)
	{
		fast = fast->next;
		prev = slow;
		slow = slow->next;
	}
	
	prev->next = slow->next;
	
}

**C++ (second implementation)**
void removeKthNodeFromEnd(LinkedList *head, int k) {
  
	LinkedList *fast = head;
	LinkedList *slow = head;
	
	for(int i = 0; i < k; i++){ fast = fast->next; }
	if(!fast)
	{
		head->value = head->next->value;
		head->next = head->next->next;
		return;
	}

	while(fast->next)
	{
		fast = fast->next;
		slow = slow->next;
	}
	
	slow->next = slow->next->next;
	
}

**Python**
class LinkedList:
    def __init__(self, value):
        self.value = value
        self.next = None


def removeKthNodeFromEnd(head, k):
    fast = head
	slow = head
	
	for i in range(k):
		fast = fast.next
		
	if fast == None:
		head.value = head.next.value
		head.next = head.next.next
		return
	
	while(fast.next != None):
		fast = fast.next
		slow = slow.next
		
	
	slow.next = slow.next.next

