**C++**

class BST {
public:
  int value;
  BST *left;
  BST *right;

  BST(int val);
  BST &insert(int val);
};

bool helper(BST *tree, int min_value, int max_value)
{
	if(tree->value < min_value || tree->value >= max_value) return false;
	if(tree->left && !helper(tree->left, min_value, tree->value)) return false;
	if(tree->right && !helper(tree->right, tree->value, max_value)) return false;
	
	return true;
	
}

bool validateBst(BST *tree) {  
	return helper(tree, INT_MIN, INT_MAX);
}


**Python**
# This is an input class. Do not edit.
class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None


def helper(tree, mn, mx):
	if tree.value < mn or tree.value >= mx:
		return False
	
	if tree.left != None and helper(tree.left, mn, tree.value) == False:
		return False
	
	if tree.right != None and helper(tree.right, tree.value, mx) == False:
		return False
	
	return True

def validateBst(tree):
    return helper(tree, -100000000, 100000000)

