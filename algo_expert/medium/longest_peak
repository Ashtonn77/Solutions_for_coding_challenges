**C++**
using namespace std;

int longestPeak(vector<int> array) {

	int longest_peak = 0;	
	int i = 1;
	bool is_peak = false;
	
	if(array.size() < 3) return 0;
	
	while(i < array.size()-1)
	{
		
		is_peak = (array[i] > array[i - 1] )&& (array[i] > array[i + 1] )? true : false;
		if(!is_peak)
		{
			i++;
			continue;
		}
		
		int left_idx = i - 2;
		int right_idx = i + 2;
		
		while(left_idx >= 0 && array[left_idx] < array[left_idx + 1])
		{
			left_idx--;
		}
		
		while(right_idx < array.size() && array[right_idx] < array[right_idx - 1])
		{
			right_idx++;
		}
		
		int cur_peak = right_idx - left_idx - 1;
		longest_peak = max(longest_peak, cur_peak);
		
		i = right_idx;
		
	}	
	
	return longest_peak;
	
}

**Python**
def longestPeak(array):
    lp, i = 0, 1
	
	if len(array) < 3 : return 0
	
	while(i < len(array) - 1):
		is_peak = array[i] > array[i + 1] and array[i] > array[i - 1]
		if not is_peak:
			i += 1
			continue
		
		l = i - 2
		r = i + 2
		
		while(l >= 0 and array[l] < array[l + 1]) : l -= 1
		while(r < len(array) and array[r] < array[r - 1]) : r += 1
			
		cur = r - l - 1
		lp = max(lp, cur)
		i = r
		
	
	return lp
