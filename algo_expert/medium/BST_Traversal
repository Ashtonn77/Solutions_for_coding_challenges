**C++**
#include <vector>
using namespace std;

class BST {
public:
  int value;
  BST *left;
  BST *right;

  BST(int val);
};

void inOrderTraverse(BST *tree, vector<int> &array) {
	
  if(!tree) return;	
	inOrderTraverse(tree->left, array);
	array.push_back(tree->value);
	inOrderTraverse(tree->right, array);
	
}

void preOrderTraverse(BST *tree, vector<int> &array) {
	
  if(!tree) return;
	array.push_back(tree->value);
	preOrderTraverse(tree->left, array);
	preOrderTraverse(tree->right, array);
	
}

void postOrderTraverse(BST *tree, vector<int> &array) {
  
	if(!tree) return;	
	postOrderTraverse(tree->left, array);	
	postOrderTraverse(tree->right, array);
	array.push_back(tree->value);
	
}





**Python**
def inOrderTraverse(tree, array):	
    if tree:	
	    inOrderTraverse(tree.left, array)
		array.append(tree.value)
		inOrderTraverse(tree.right, array)		
	return array

def preOrderTraverse(tree, array):
    if tree:	
		array.append(tree.value)
		preOrderTraverse(tree.left, array)
		preOrderTraverse(tree.right, array)		
	return array	


def postOrderTraverse(tree, array):
    if tree:	
		postOrderTraverse(tree.left, array)
		postOrderTraverse(tree.right, array)
		array.append(tree.value)		
	return array	

