**C++**
using namespace std;

class BST {
public:
  int value;
  BST *left;
  BST *right;

  BST(int value) {
    this->value = value;
    left = NULL;
    right = NULL;
  }

  void insert(int value) {
    if (value < this->value) {
      if (left == NULL) {
        left = new BST(value);
      } else {
        left->insert(value);
      }
    } else {
      if (right == NULL) {
        right = new BST(value);
      } else {
        right->insert(value);
      }
    }
  }
};

BST *helper_builder_function(vector<int> array, BST *root, int start_idx, int end_idx)
{
	
	if(end_idx < start_idx){ return nullptr; }
	int mid_idx = (start_idx + end_idx) / 2;
	int value = array[mid_idx];
	
	if(!root){root = new BST(value);}
	else{ root->insert(value); }

	helper_builder_function(array, root, start_idx, mid_idx - 1);
	helper_builder_function(array, root, mid_idx + 1, end_idx);
	
	return root;
	
}

BST *minHeightBst(vector<int> array) {  
  return helper_builder_function(array, nullptr, 0, array.size() -1);
}

**Python**
def helper(arr, bst, si, ei):
	if ei < si : return
	
	mi = (ei + si) // 2
	val = arr[mi]
	
	if bst == None:
		bst = BST(val)
	else:
		bst.insert(val)
		
	helper(arr, bst, si, mi - 1)
	helper(arr, bst, mi + 1, ei)
	
	return bst
	

def minHeightBst(array):
    return helper(array, None, 0, len(array) - 1)


class BST:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

    def insert(self, value):
        if value < self.value:
            if self.left is None:
                self.left = BST(value)
            else:
                self.left.insert(value)
        else:
            if self.right is None:
                self.right = BST(value)
            else:
                self.right.insert(value)

