**C++**

#include <vector>
using namespace std;

// Do not edit the class below except
// for the depthFirstSearch method.
// Feel free to add new properties
// and methods to the class.

class Node {
public:
  string name;
  vector<Node *> children;

  Node(string str) { name = str; }

	
void helper(Node *root, vector<string> *&v)
{
	v->push_back(root->name);
	for(int i = 0; i < root->children.size(); i++)
	{
		helper(root->children[i], v);
	}	
}

 vector<string> depthFirstSearch(vector<string> *array) {
		
	 array->push_back(name);
	 for(auto child : children)
	 {
		 helper(child, array);
	 }
	 return *array;
 }

  Node *addChild(string name) {
    Node *child = new Node(name);
    children.push_back(child);
    return this;
  }
};



---------------------------------------------------------------

**Python**

# Do not edit the class below except
# for the depthFirstSearch method.
# Feel free to add new properties
# and methods to the class.
class Node:
    def __init__(self, name):
        self.children = []
        self.name = name

    def addChild(self, name):
        self.children.append(Node(name))
        return self

    def depthFirstSearch(self, array):
        array.append(self.name)
		for child in self.children:
			child.depthFirstSearch(array)
			
		return array		
