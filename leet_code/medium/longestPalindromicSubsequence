**memoization approach - top down**

class Solution {
    
    public int longestPalindromeSubseq(String s) {
        
        int[][] memo = new int[s.length()][s.length()];
        for(int[] arr : memo)
            Arrays.fill(arr, -1);
        
        
        return helper(s, 0, s.length() - 1, memo);
    }
    
    int helper(String s, int start, int end, int[][] memo){
        
        if(start > end)
            return 0;
        
        if(start == end)
            return 1;
        
        if(memo[start][end] == -1){
            
            char a = s.charAt(start);
            char b = s.charAt(end);
            if(a == b)                
                memo[start][end] = 2 + helper(s, start + 1, end - 1, memo);                
            else
                memo[start][end] = Math.max(helper(s, start + 1, end, memo), helper(s, start, end - 1, memo));
            
            
            
        }

        return memo[start][end];
        
    }
    
}

---------------------------------------------------------------------------------
**bottom up approach**

class Solution {
    
    public int longestPalindromeSubseq(String s) {
    
        int _l = s.length();
        int[][] out = new int[_l][_l];
        
        int k = 0;
        for(int i = 0; i < _l; i++)
            out[i][k++] = 1;
        
        
        for(int i = _l - 2; i >= 0; i--){            
            
            for(int j = i + 1; j < _l; j++){
                
                if(s.charAt(i) != s.charAt(j))
                    out[i][j] = Math.max(out[i][j - 1], out[i + 1][j]);
                    
                else
                    out[i][j] = 2 + out[i + 1][j - 1];
         
                
            }
            
            
        }

        
        
        return out[0][_l-1];
        
    }
    
    
    
}
