/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        
        Node *left_node = root;
        
        while(left_node && left_node->left){
            
            populate_right(left_node);
            left_node = left_node->left;
        }
        
        
        return root;
        
    }
    
    
    void populate_right(Node *right_node){
        
        while(right_node){
            
            right_node->left->next = right_node->right;
            if(right_node->next)
                    right_node->right->next = right_node->next->left;
            
            right_node = right_node->next;
            
        }
        
        
    }
    

    
};
