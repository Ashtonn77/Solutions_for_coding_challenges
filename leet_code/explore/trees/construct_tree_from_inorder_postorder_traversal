/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    
    TreeNode* buildTree_helper(vector<int>& inorder, int i_1, int i_2, vector<int>& postorder, int p_1, int p_2){
         
        if(i_1 >= i_2 || p_1 >= p_2) return nullptr;
        TreeNode *root = new TreeNode(postorder[p_2 - 1]);
        
        auto it = find(inorder.begin() + i_1, inorder.end() + i_2, postorder[p_2 - 1]);
        
        int diff = it - inorder.begin() - i_1;
        root->left = buildTree_helper(inorder, i_1, i_1 + diff, postorder,  p_1, p_1 + diff);
        root->right = buildTree_helper(inorder, i_1 + diff + 1, i_2, postorder, p_1 + diff, p_2 - 1);
        
        return root;
        
    }
    
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
       
        int n = inorder.size();
        if(n < 1) return nullptr; 
        
        return buildTree_helper(inorder, 0, n, postorder, 0, n);
        
    }
};



