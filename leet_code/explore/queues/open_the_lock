class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        
        map<string, int> dead_ends_map;
        
        for(auto c : deadends)
            dead_ends_map[c] = 1;
        
        map<string, int> visited;
        visited["0000"] = 1;
        
        queue<string> q;
        q.push("0000");
        
        int level = 0;
        
        
        while(!q.empty()){
            
            int size = q.size();
            
            while(size > 0){               
          
                string lock_pos = q.front();
                q.pop();
              if(dead_ends_map[lock_pos]){
                  size--;
                  continue;                  
              }  
               
              if(lock_pos == target){
                  return level;
              }  
                
                
             string down, up;
                
             for(int i = 0; i < 4; i++){
                 
                    down = up = lock_pos;
                    char upCh = up[i], downCh = down[i];
                    up[i] = (upCh == '9' ? '0' : upCh + 1);
                    down[i] = (downCh == '0' ? '9' : downCh - 1);            
             
                
                 if(!visited[up] && !dead_ends_map[up]){
                     q.push(up);
                     visited[up] = 1;
                 }
                 
                 if(!visited[down] && !dead_ends_map[down]){
                     q.push(down);
                     visited[down] = 1;
                 }             
             
             }                          
          size--;
                
            }           
            
            
            level++;
        }       
        
        
        return -1;
    }
};
