class Solution {
public:
    int findShortestSubArray(vector<int>& nums) {
        
    map<int, int> freq;
    map<int, vector<int>> pos;
    int mx = INT_MIN;
    
    /*
    get frequency of each number in array
    get highest degree
    note the positions of frequencies
    */    
    for(int i = 0; i < nums.size(); i++)
    {
        mx = max(mx, ++freq[nums[i]]);        
        pos[nums[i]].push_back(i);
    }
       
    //get shortest distance
    int dist = INT_MAX;
    for(auto num : nums)
    {
        if(freq[num] == mx)            
            dist = min(dist, pos[num].back() - pos[num].front());         
    }
    
    return dist + 1;
        
    }
};
Python

class Solution:
    def findShortestSubArray(self, nums: List[int]) -> int:
        freq = {}
        pos = {nums[k]: [] for k in range(len(nums))}
        mx = -100000
        mn = 100000
        
        for i in range(len(nums)):
            freq[nums[i]] = freq.get(nums[i], 0) + 1
            pos[nums[i]].append(i)
            mx = max(mx, freq[nums[i]])
            
            
        for i in nums:
            if freq[i] == mx:
                mn = min(mn, pos[i][-1] - pos[i][0])
                
        return mn + 1