class Solution {
    
    Map<String, Boolean> map = new HashMap<>();
    
    public boolean isInterleave(String s1, String s2, String s3) {
        
        int _j = s1.length();
        int _k = s2.length();
        int _l = s3.length();
        
        if(_l != (_j + _k))
            return false;
        
        return check(s1, s2, s3, _j, _k, _l, 0, 0, 0);

        
    }
    
    
    boolean check(String s1, String s2, String s3, int l1, int l2, int l3, int p1, int p2, int p3) {
        
        
        if(p3 == l3)
            return p2 == l2 && p1 == l1;
        
        
        String key = String.valueOf(p1) + "*" + String.valueOf(p2) + "*" + String.valueOf(p3);
        
        if(map.containsKey(key))
            return map.get(key);
        
        if(p1 == l1){
           
            if(s2.charAt(p2) == s3.charAt(p3)){
                
                map.put(key, check(s1, s2, s3, l1, l2, l3, p1, p2 + 1, p3 + 1));
                
            }else{
                map.put(key, false);
            }
            
            return map.get(key);
           
        }
        
        
        if(p2 == l2){
            
            if(s1.charAt(p1) == s3.charAt(p3)){
                
                map.put(key, check(s1, s2, s3, l1, l2, l3, p1 + 1, p2, p3 + 1));
                
            }else{
                
                map.put(key, false);
                
            }
            
            return map.get(key);
            
        }
        
        boolean first = false, second = false;
        
        if(s1.charAt(p1) == s3.charAt(p3))
            first = check(s1, s2, s3, l1, l2, l3, p1 + 1, p2, p3 + 1);
        
        if(s2.charAt(p2) == s3.charAt(p3))
            second = check(s1, s2, s3, l1, l2, l3, p1, p2 + 1, p3 + 1);
        
                           
        first = first || second;
        map.put(key, first);
                           
        return map.get(key);
        
        
        
    }
    
}

/*test branch*/
