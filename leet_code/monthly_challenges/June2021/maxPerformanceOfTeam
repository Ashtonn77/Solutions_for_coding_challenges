class Solution {
    public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
        
        List<int[]> arr = new ArrayList<>();
        long max = Long.MIN_VALUE;
        PriorityQueue<Integer> priorityQueue = new PriorityQueue<>();

        for(int i = 0; i < n; i++){
            int[] test = new int[2];
            test[0] = efficiency[i];
            test[1] = speed[i];
            arr.add(test);
        }
        
        arr.sort(new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return o2[0] - o1[0];
            }
        });

        long sum = 0;
        
        for( int[] res : arr){
            
            if(priorityQueue.size() > k - 1){
                sum -= priorityQueue.poll();
            }
            
            priorityQueue.add(res[1]);
            sum += res[1];

            max = Math.max(max, sum * res[0]);
            
        }

        return (int)(max % 1000000007);
        
    }
}
