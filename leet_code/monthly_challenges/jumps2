**0(n)**

class Solution {
    public int jump(int[] nums) {
        
        int _l = nums.length;
        if(_l <= 1) return 0;
        
        int jumps = 0;
        int mxReach = nums[0];
        int steps = mxReach;
        
        for(int i = 1; i < (_l - 1); i++){            
            
            mxReach = Math.max(mxReach, nums[i] + i);
            steps--;
            
            if(steps == 0){
                
                jumps++;
                steps = mxReach - i;
                
            }
            
        }
        return jumps + 1;
        
    }
}


======================================================

**O(n^2)**
class Solution {
    public int jump(int[] nums) {
        
        int l = nums.length;
        int[] jumps = new int[l];
        
        Arrays.fill(jumps, Integer.MAX_VALUE);
        jumps[0] = 0;
        
        for(int i = 1; i < l; i++){
            
            for(int j = 0; j < i; j++){
                
                if(nums[j] + j >= i){
                    
                    jumps[i] = Math.min(jumps[i], jumps[j] + 1);
                    
                }
                
            }
            
        }
     
        return jumps[l - 1];
    }
}
