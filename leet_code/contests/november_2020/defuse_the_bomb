class Solution {
public:
    
    int up(vector<int> v, int i, int cur)
    {
        int sm = 0;
        if(cur + i >= v.size())
        {
            i = (cur + i) % v.size();
            sm += v.back();
            sm += v[i];
        }
        else
        {
            sm += v[cur + i];
        }
        return sm;
    }

    
    vector<int> decrypt(vector<int>& code, int k) {
        
    vector<int> sum_up(code.size(), 0);
    
    if(k == 0) return sum_up;
    
    bool is_less = false;
    
    if(k < 0)
    { 
     is_less = true; 
     reverse(code.begin(), code.end());
    }
    
    sum_up[0] = code.front();
    for(int i = 1; i < code.size(); i++)
    {
        sum_up[i] = code[i] + sum_up[i - 1];
    }    
  
    for(int i = 0; i < code.size(); i++)
    {
        if(is_less)
        {
            code[i] = up(sum_up, i, -1 * k) - sum_up[i];
        }
        else
        {
            code[i] = up(sum_up, i, k) - sum_up[i];
        }
    }
    
   
    if(is_less) reverse(code.begin(), code.end());
    
    return code;
        
    }
};
