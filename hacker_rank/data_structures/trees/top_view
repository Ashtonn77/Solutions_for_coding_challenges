int mn = INT_MAX, mx = INT_MIN;
void top_view_helper(Node *root, int hd, map<Node*, int> &m)
{
    if(!root) return;
    mn = min(mn, hd);
    mx = max(mx, hd);

    m[root] = hd;
    top_view_helper(root->left, hd - 1, m);
    top_view_helper(root->right, hd + 1, m);

}


void topView(Node * root) {

    map<Node*, int> tree_map;
    top_view_helper(root, 0, tree_map);

    queue<Node*> tree_queue;
    tree_queue.push(root);

    map<int, int> lv_order;

    while(!tree_queue.empty())
    {

        int sz = tree_queue.size();

        for(int i = 0; i < sz; i++)
        {
            Node *top_node = tree_queue.front();
            tree_queue.pop();
            int hd = tree_map[top_node];

            if(!lv_order[hd])
                lv_order[hd] = top_node->data;

            if(top_node->left) tree_queue.push(top_node->left);
            if(top_node->right) tree_queue.push(top_node->right);

        }

    }

    for(int i = mn; i <= mx; i++)
    {
        if(lv_order[i])
        cout << lv_order[i] << " ";
    }

}
