void load(map<int, int> &m, vector<int> sum_1)
{    
    for(auto c : sum_1)
        m[c]++;       

}
 

vector<int> populate(vector<int> h1, vector<int> sum_1)
{
    sum_1[h1.size()-1] = h1.back();
    for(int i = h1.size() - 2; i >= 0; i--){            
     sum_1[i] = sum_1[i + 1] + h1[i];            
    }       
    return sum_1;    
}

int equalStacks(vector<int> h1, vector<int> h2, vector<int> h3) {

    vector<int> sum_1(h1.size(), 0);
    vector<int> sum_2(h2.size(), 0);
    vector<int> sum_3(h3.size(), 0);
    
    sum_1 = populate(h1, sum_1);
    sum_2 = populate(h2, sum_2);
    sum_3 = populate(h3, sum_3);   
    
    if(sum_1[0] == sum_2[0] && sum_2[0] == sum_3[0])
    {
        return sum_1[0];
    }
    
    map<int, int> s_m;
    
    load(s_m, sum_1);
    load(s_m, sum_2);
    load(s_m, sum_3);
    
    int mx = 0;
    
    for(auto el : s_m)
    {
        if(el.second >= 3)
        {
            mx = max(el.first, mx);
        }
    }

    return mx;
}

